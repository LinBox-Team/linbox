#f := proc(n, t, k) evalf(t/((n^k) * log(n))) end;
#g := proc(s, n, t, p, tm, tb, tl,  pb, k) [n, f(n, t, 2+k), f(n, p, k), f(n, tm, 2), f(n, tb, 3+k), f(n, tl, 3 + k), f(n, pb, k)] end;
#h := proc(L, k) g(L[1], L[2], L[3], L[4], L[5], L[6], L[7], L[8], k) end;
#hh:= proc(nb, ne, k) for i from nb to ne do print(h( Q[i], k)) od end;
#Q := [
#"[ dim,      bbt,  bbp,    blast,  lut, blasp]",
#[ 2,   1,     0.01,    6,     0.00,     8],
#[ 3,   8,     0.06,   42,     0.02,    54],
#[ 4,   8,     0.03,   18,     0.00,    22],
#[ 5,  28,     1.30,   102,    0.16,   130],
#[ 6,  28,     1.81,   144,    0.23,   185],
#[ 7,  35,     4.57,   216,    0.60,   277],
#[ 8,  35,     2.94,   156,    0.38,   200],
#[ 9,  50,    17.1,    378,    4.12,   485],
#[10,  50,    24.47,   387,    2.68,   497],
#[11,  56,    13.28,   281,    1.90,   361],
#[12,  56,    11.64,   251,    1.63,   323],
#[22, 175,   975.84,  1613,  292.48,  2073],
#[24, 210,  1261.96,  1655,  311.12,  2127],
#[32, 448, 12917.10,  3567,  4885.91, 5169],
#[42, 700,     1.00,     1, 30076.00, 9011], # first two are bogus
#[52,1008,     1.00,     1,     1.00,    1] ]; # all bogus


binmap := proc(f, l, m) local n, i;
  n := []; for i from 1 to nops(l) do  n := [op(n), f(l[i], m[i])] od; n end;

# make list of i-th elements of lists L in list of lists LL (only when s <= L[1] <= e).
extract := proc(LL, i, s, e) local A, L; A := [];
  for L in LL do if L[1] >= s and L[1] <= e then A := [op(A), L[i]] fi od; A end;

Qbb := [
#"[model	order	time_bb	nprimebb]", 
[2,   	1.0,	0,   	6.0],
[3,  	8.0,	0.07,	42.0],
[4,  	8.0,	0.04,	18.0],
[5,   	28.0,	1.25,	102.0],
[6,  	28.0,	3.16,	144.0],
[7,  	35.0,	4.21,	216.0],
[8,  	35.0,	5.24,	156.0],
[9,  	50.0,	15.91,	378.0],
[10,  	50.0,	18.59,	387.0],
[11,  	56.0,	13.16,	281.0],
[12,  	56.0,	11.71,	251.0],
[22,  	175.0,	940.61,	1613.0],
[24,  	210.0,	1290.0,	1655.0],
[32,  	448.0,	12885.9, 3567.0],
[42,  	700.0,   54483.7, 6132.0],
[52,  1008.0,   174879.0, 8746.0] ]; 
im := 1; idim := 2; ibbt := 3; ibbp := 4; 

Qb := [
#"[model	order	nbuildin time_blas  time_lu nprimeblu]",
[2,   	1,	0,	0,	 	0,	7],
[3,  	8,	0.07,	0.01,		0.01,	53],
[4,  	8,	0.04,	0.01,		0,	22],
[5,   	28,	0.67,	0.13,		0.09,	134],
[6,  	28,	0.89,	0.21,		0.15,	190],
[7,  	35,	1.53,	0.53,		0.41,	287],
[8,  	35,	1.75,	0.47,		0.37,	207],
[9,  	50,	3.76,	2.32,		1.87,	508],
[10,  	50,	3.28,	2.4,		1.87,	521],
[11,  	56,	3.62,	1.75,		1.26,	380],
[12,  	56,	5.02,	2.02,		1.59,	339],
[22,  	175,   52.84,	266.24,		298.7,	2265],
[24,  	210,   59.7,	309.47,		353.27,	2339],
[32,  	448,  330.87,	4885.91,	5292.68,5169],
[42,  	700,  745.9,	30076.00,	20788.3,9011],
[52,  1008,   1599.1, 	109735.0, 	1.0, 	12990] ]; # bogus tl 
im := 1; idim := 2; imt := 3; ibt := 4; ilt := 5; ibp := 6; 

firstmodel := 9;
pbb := extract(Qbb, ibbp, firstmodel, 52);
pb := extract(Qb, ibp, firstmodel, 52);
nl := extract(Qbb, idim, firstmodel, 52);

with(stats);

foo := proc(formula, vars, pl)

  formula1 := fit[leastsquare[[p, n], formula, vars]]([pl, nl]);
  print(evalf(formula1));

  fg := proc(nn, p) evalf(p / subs(n = nn, op(2, formula1))) end;
  fa := proc(nn, p) evalf(p - subs(n = nn, op(2, formula1))) end;

  errg := binmap(fg, nl, pl);
  print("geom errs", errg);
  #erra := binmap(fa, nl, pl);
  #print("arith errs", erra);

  #sd := describe[standarddeviation](erra);
  #ave := describe[mean](erra);
  #print(["arith", ave, sd, sd/ave]);
  [describe[mean](errg),describe[standarddeviation](errg)];
end;

#foo(p = a + b*n + c*n*log(n), {a,b,c}, pbb);
#foo(p = a + b*n, {a,b},pbb);
#foo(p = a + b*n*log[2](n), {a,b},pbb);
foo(p = a*n + b*n*log[2](n), {a,b},pbb);
foo(p = a*n, {a},pbb);
foo(p = a*n*log[2](n), {a},pbb);

#foo(p = a + b*n + c*n*log(n), {a,b,c}, pb);
#foo(p = a + b*n, {a,b},pb);
#foo(p = a + b*n*log[2](n), {a,b},pb);
foo(p = a*n + b*n*log[2](n), {a,b},pb);
foo(p = a*n, {a},pb);
foo(p = a*n*log[2](n), {a},pb);

N := 7168.0;
1.9*N*log[2](N);
12.7*N;
