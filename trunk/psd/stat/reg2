# full times up to Q52 of dim 1008 (prior to cra improvement.

# make list of i-th elements of lists L in list of lists LL (only when s <= L[1] <= e).
extract := proc(LL, i, s, e) local A, L; A := [];
  for L in LL do if L[1] >= s and L[1] <= e then A := [op(A), L[i]] fi od; A end;

blb := 23; #bits per prime used in blas, lu. down to 20 at 1008
bbb := 30; #bits per prime used in bb.
Q := [
#"[model dim    bbt    bbp   mt        bt       lt   blp]";
[2,   	1.0,	0,   	6.0*bbb,     0,		0,	 	0,	7],
[3,  	8.0,	0.07,	42.0*bbb,    0.07,	0.01,		0.01,	53],
[4,  	8.0,	0.04,	18.0*bbb,    0.04,	0.01,		0,	22],
[5,   	28.0,	1.25,	102.0*bbb,   0.67,	0.13,		0.09,	134],
[6,  	28.0,	3.16,	144.0*bbb,   0.89,	0.21,		0.15,	190],
[7,  	35.0,	4.21,	216.0*bbb,   1.53,	0.53,		0.41,	287],
[8,  	35.0,	5.24,	156.0*bbb,   1.75,	0.47,		0.37,	207],
[9,  	50.0,	15.91,	378.0*bbb,   3.76,	2.32,		1.87,	508],
[10,  	50.0,	18.59,	387.0*bbb,   3.28,	2.4,		1.87,	521],
[11,  	56.0,	13.16,	281.0*bbb,   3.62,	1.75,		1.26,	380],
[12,  	56.0,	11.71,	251.0*bbb,   5.02,	2.02,		1.59,	339],
[22,  	175.0,	940.61,	1613.0*bbb,  52.84,	266.24,		298.7,	2265],
[24,  	210.0,	1290.0,	1655.0*bbb,  59.7,	309.47,		353.27,	2339],
[32,  	448.0,	12885.9, 3567.0*bbb, 330.87, 4885.91,	5292.68, 5169],
[42,  	700.0,  54483.7, 6132.0*bbb, 745.9,	30076.00,	20788.3, 9011],
[52,  1008.0,  174879.0, 8746.0*bbb, 1599.1, 109735.0, 	(1622.0*60*12990/9795), 12990] ]; # bogus tl 
im := 1; idim := 2; ibbt := 3; ibbp := 4; imt := 5; ibt := 6; ilt := 7; iblp := 8; 

firstmodel := 22; #used in foo
lastmodel := 52; #used in foo
nl := extract(Q, idim, firstmodel, lastmodel); # used in foo

pbb := extract(Q, ibbp, firstmodel, lastmodel);

fo := proc(p, n) evalf(p*(log[2](sqrt(2^52/n)))) end;

pb := zip(fo, extract(Q, iblp, firstmodel, lastmodel),
                 extract(Q, idim, firstmodel, lastmodel)); 

with(stats);

fg := proc(nn, p) evalf(p / subs(n = nn, op(2, formula1))) end;

bar := proc(lsqarg, pl) global formula1;

  formula1 := fit[leastsquare[op(lsqarg)]]([pl, nl]);
  #print(formula1);
  print(evalf(formula1));

  

  errg := zip(fg, nl, pl);
  print("geom errs", errg);

  [describe[mean](errg),describe[standarddeviation](errg)];
end;

foo := proc(lsqarg, loc)
  if loc = iblp  then
    pl := zip(fo, extract(Q, loc, firstmodel, lastmodel), nl);
  else 
    pl := extract(Q, loc, firstmodel, lastmodel);
  fi;
  #nl := extract(Q, idim, firstmodel, lastmodel);
  bar(lsqarg, pl)
end;

foo([[b, n],b = a*n, {a}], ibbp);
foo([[b, n],b = a*n*log[2](n), {a}], ibbp);
foo([[b, n],b = a + b*n + c*n*log[2](n), {a,b,c}], ibbp);

foo([[b, n],b = a*n, {a}], iblp);
foo([[b, n],b = a*n*log[2](n), {a}], iblp);
foo([[b, n],b = a + b*n + c*n*log[2](n), {a,b,c}], iblp);


lpb := map(ln,pb);

# b = (c*n*lg(n))^a ,  lg(b) = /*lg(c)*/ + a*lg(n*lg(n)) 
bar([[lb, n],lb = lc + a*log(n*log[2](n)), {lc, a}], lpb); 
