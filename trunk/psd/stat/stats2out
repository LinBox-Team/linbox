    |\^/|     Maple 9.5 (IBM INTEL LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2004
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
#Analysis of step data up to 102, all algs.
> 
# 1. raw data
#Q:= (model-num, dim, nnz, bits,  bbt, dbt, dlut)*
> Q := [ # put data following
> 
> Q2Cpt, # model number
> 1, # dimension 
> 1, # Non Zero Entries: 
> 1, # Bit length
> 1.10961e-19, # MinBB modulus a prime
> 1.10961e-20, # MinBlas modulus a prime
> 0.0001, # LUBlas modulus a prime
> 
> Q3Cpt, # model number
> 8, # dimension 
> 1046, # Non Zero Entries: 
> 71, # Bit length
> 0.004, # MinBB modulus a prime
> 0.0002, # MinBlas modulus a prime
> 0.0001, # LUBlas modulus a prime
> 
> Q4Cpt, # model number
> 8, # dimension 
> 1046, # Non Zero Entries: 
> 73, # Bit length
> 0.004, # MinBB modulus a prime
> 0.0002, # MinBlas modulus a prime
> 1e-04, # LUBlas modulus a prime
> 
> Q5Cpt, # model number
> 28, # dimension 
> 4396, # Non Zero Entries: 
> 121, # Bit length
> 0.029, # MinBB modulus a prime
> 0.001, # MinBlas modulus a prime
> 0.0007, # LUBlas modulus a prime
> 
> Q6Cpt, # model number
> 28, # dimension 
> 4396, # Non Zero Entries: 
> 115, # Bit length
> 0.027, # MinBB modulus a prime
> 0.0009, # MinBlas modulus a prime
> 0.0007, # LUBlas modulus a prime
> 
> Q7Cpt, # model number
> 35, # dimension 
> 5608, # Non Zero Entries: 
> 153, # Bit length
> 0.038, # MinBB modulus a prime
> 0.0015, # MinBlas modulus a prime
> 0.001, # LUBlas modulus a prime
> 
> Q8Cpt, # model number
> 35, # dimension 
> 5608, # Non Zero Entries: 
> 149, # Bit length
> 0.039, # MinBB modulus a prime
> 0.0014, # MinBlas modulus a prime
> 0.001, # LUBlas modulus a prime
> 
> Q9Cpt, # model number
> 50, # dimension 
> 8800, # Non Zero Entries: 
> 234, # Bit length
> 0.075, # MinBB modulus a prime
> 0.0031, # MinBlas modulus a prime
> 0.0022, # LUBlas modulus a prime
> 
> Q10Cpt, # model number
> 50, # dimension 
> 8800, # Non Zero Entries: 
> 256, # Bit length
> 0.077, # MinBB modulus a prime
> 0.0033, # MinBlas modulus a prime
> 0.0022, # LUBlas modulus a prime
> 
> Q11Cpt, # model number
> 56, # dimension 
> 9674, # Non Zero Entries: 
> 139, # Bit length
> 0.089, # MinBB modulus a prime
> 0.0037, # MinBlas modulus a prime
> 0.0025, # LUBlas modulus a prime
> 
> Q12Cpt, # model number
> 56, # dimension 
> 9674, # Non Zero Entries: 
> 144, # Bit length
> 0.091, # MinBB modulus a prime
> 0.0038, # MinBlas modulus a prime
> 0.0028, # LUBlas modulus a prime
> 
> Q22Cpt, # model number
> 175, # dimension 
> 36262, # Non Zero Entries: 
> 308, # Bit length
> 0.812, # MinBB modulus a prime
> 0.0448, # MinBlas modulus a prime
> 0.0285, # LUBlas modulus a prime
> 
> Q24Cpt, # model number
> 210, # dimension 
> 41550, # Non Zero Entries: 
> 264, # Bit length
> 1.138, # MinBB modulus a prime
> 0.0693, # MinBlas modulus a prime
> 0.0408, # LUBlas modulus a prime
> 
> Q32Cpt, # model number
> 448, # dimension 
> 97960, # Non Zero Entries: 
> 264, # Bit length
> 5.167, # MinBB modulus a prime
> 0.503, # MinBlas modulus a prime
> 0.2052, # LUBlas modulus a prime
> 
> Q42Cpt, # model number
> 700, # dimension 
> 150470, # Non Zero Entries: 
> 291, # Bit length
> 10.9, # MinBB modulus a prime
> 1.5118, # MinBlas modulus a prime
> 0.5478, # LUBlas modulus a prime
> 
> Q52Cpt, # model number
> 1008, # dimension 
> 225842, # Non Zero Entries: 
> 287, # Bit length
> 26.044, # MinBB modulus a prime
> 4.428, # MinBlas modulus a prime
> 1.2465, # LUBlas modulus a prime
> 
> Q62Cpt, # model number
> 1400, # dimension 
> 324698, # Non Zero Entries: 
> 326, # Bit length
> 49.271, # MinBB modulus a prime
> 11.025, # MinBlas modulus a prime
> 2.6781, # LUBlas modulus a prime
> 
> Q72Cpt, # model number
> 2100, # dimension 
> 505040, # Non Zero Entries: 
> 306, # Bit length
> 94.143, # MinBB modulus a prime
> 34.7034, # MinBlas modulus a prime
> 6.8702, # LUBlas modulus a prime
> 
> Q82Cpt, # model number
> 2800, # dimension 
> 694270, # Non Zero Entries: 
> 323, # Bit length
> 131.875, # MinBB modulus a prime
> 66.3997, # MinBlas modulus a prime
> 9.271, # LUBlas modulus a prime
> 
> Q92Cpt, # model number
> 3360, # dimension 
> 834790, # Non Zero Entries: 
> 329, # Bit length
> 164.22, # MinBB modulus a prime
> 111.657, # MinBlas modulus a prime
> 13.8993, # LUBlas modulus a prime
> 
> Q102Cpt, # model number
> 4480, # dimension 
> 1154820, # Non Zero Entries: 
> 347, # Bit length
> 294.657, # MinBB modulus a prime
> 282.267, # MinBlas modulus a prime
> 34.1886 ]; # LUBlas modulus a prime
                                 -18             -19
Q := [Q2Cpt, 1, 1, 1, 0.110961 10   , 0.110961 10   , 0.0001, Q3Cpt, 8, 1046,

    71, 0.004, 0.0002, 0.0001, Q4Cpt, 8, 1046, 73, 0.004, 0.0002, 0.0001, Q5Cpt,

    28, 4396, 121, 0.029, 0.001, 0.0007, Q6Cpt, 28, 4396, 115, 0.027, 0.0009,

    0.0007, Q7Cpt, 35, 5608, 153, 0.038, 0.0015, 0.001, Q8Cpt, 35, 5608, 149,

    0.039, 0.0014, 0.001, Q9Cpt, 50, 8800, 234, 0.075, 0.0031, 0.0022, Q10Cpt,

    50, 8800, 256, 0.077, 0.0033, 0.0022, Q11Cpt, 56, 9674, 139, 0.089, 0.0037,

    0.0025, Q12Cpt, 56, 9674, 144, 0.091, 0.0038, 0.0028, Q22Cpt, 175, 36262,

    308, 0.812, 0.0448, 0.0285, Q24Cpt, 210, 41550, 264, 1.138, 0.0693, 0.0408,

    Q32Cpt, 448, 97960, 264, 5.167, 0.503, 0.2052, Q42Cpt, 700, 150470, 291,

    10.9, 1.5118, 0.5478, Q52Cpt, 1008, 225842, 287, 26.044, 4.428, 1.2465,

    Q62Cpt, 1400, 324698, 326, 49.271, 11.025, 2.6781, Q72Cpt, 2100, 505040,

    306, 94.143, 34.7034, 6.8702, Q82Cpt, 2800, 694270, 323, 131.875, 66.3997,

    9.271, Q92Cpt, 3360, 834790, 329, 164.22, 111.657, 13.8993, Q102Cpt, 4480,

    1154820, 347, 294.657, 282.267, 34.1886]

> 
> 
> 
# 2. reorganization functions
> extract := proc(i) local n, l;  global Q;
>   n := nops(Q);
>   L := [];
>   for j from i by 7 to n do L := [op(L), Q[j]] od;
>   L end:
Warning, `L` is implicitly declared local to procedure `extract`
Warning, `j` is implicitly declared local to procedure `extract`
> 
#Q:= (model-num, dim, nnz, bits,  bbt, dbt, dlut)*
> first := 11;
                                  first := 11

> dimsl := extract(2+7*first);
       dimsl := [175, 210, 448, 700, 1008, 1400, 2100, 2800, 3360, 4480]

> nnzl := extract(3+7*first);
nnzl := [36262, 41550, 97960, 150470, 225842, 324698, 505040, 694270, 834790,

    1154820]

> bitsl := extract(4+7*first);
          bitsl := [308, 264, 264, 291, 287, 326, 306, 323, 329, 347]

> bbtl := extract(5+7*first);
bbtl := [

    0.812, 1.138, 5.167, 10.9, 26.044, 49.271, 94.143, 131.875, 164.22, 294.657

    ]

> dbtl := extract(6+7*first);
dbtl := [0.0448, 0.0693, 0.503, 1.5118, 4.428, 11.025, 34.7034, 66.3997,

    111.657, 282.267]

> dlutl := extract(7+7*first);
dlutl := [0.0285, 0.0408, 0.2052, 0.5478, 1.2465, 2.6781, 6.8702, 9.271,

    13.8993, 34.1886]

> 
# 3. statistical analysis 
> with(stats);
  [anova, describe, fit, importdata, random, statevalf, statplots, transform]

> 
#nnz
> x := fit[leastsquare[[nnz, n], nnz = a*n + b*n*log[2](n), {a, b}]]
>        ([nnzl, dimsl]):
bytes used=4004372, alloc=3472772, time=0.20
> form := evalf(op(2,x)); 
                  form := 77.17683618 n + 21.37693755 n ln(n)

> 
> f1 := proc(t, nn) evalf( subs(n = nn, form) / t - 1) end:
> 
> err1 := zip(f1, nnzl, dimsl);
err1 := [-0.0947210554, -0.0322228592, -0.0502243600, 0.0105217647,

    0.0043036063, 0.0004703743, 0.0008673753, -0.0044362017, 0.0092641445,

    -0.0033808279]

> 
> [describe[mean](err1),describe[standarddeviation](err1)];
                        [-0.01595580391, 0.03199083767]

> 
#bits
> x := fit[leastsquare[[bits, n], bits = a + b*log[2](n), {a, b}]]
>        ([bitsl, dimsl]):
> form := evalf(op(2,x)); 
                    form := 176.5334824 + 18.42786376 ln(n)

> 
> 
> err1 := zip(f1, bitsl, dimsl);
err1 := [-0.1178264459, 0.0419289829, 0.0948173498, 0.0214979323, 0.0591480555,

    -0.0489904291, 0.0375848884, -0.0006119445, -0.0086257182, -0.0447737615]

> 
> [describe[mean](err1),describe[standarddeviation](err1)];
                        [0.003414890970, 0.05862391383]

> 
#bbt
> foo := proc(arg)
> x := fit[leastsquare[[bbt, nnz, n], op(arg)]]
>        ([bbtl, nnzl, dimsl]):
> form := evalf(op(2,x)): 
> print( "bbt = ",  form ); 
> 
> f2 := proc(nnzz, nn) evalf(subs(n=nn, nnz= nnzz, form)) end:
> nnzl;
> dimsl;
> esttimel := zip(f2 , nnzl, dimsl);
> bbtl;
> 
> f3 := proc(t, et) evalf(et/t - 1) end:
> err2 := zip(f3, bbtl, esttimel);
> print("relative errors",  err2);
> 
> [describe[mean](err2),describe[standarddeviation](err2)];
> end;
Warning, `x` is implicitly declared local to procedure `foo`
Warning, `form` is implicitly declared local to procedure `foo`
Warning, `f2` is implicitly declared local to procedure `foo`
Warning, `esttimel` is implicitly declared local to procedure `foo`
Warning, `f3` is implicitly declared local to procedure `foo`
Warning, `err2` is implicitly declared local to procedure `foo`
foo := proc(arg)
local x, form, f2, esttimel, f3, err2;
    x := fit[leastsquare[[bbt, nnz, n], op(arg)]]([bbtl, nnzl, dimsl]);
    form := evalf(op(2, x));
    print("bbt = ", form);
    f2 := proc(nnzz, nn) evalf(subs(n = nn, nnz = nnzz, form)) end proc;
    nnzl;
    dimsl;
    esttimel := zip(f2, nnzl, dimsl);
    bbtl;
    f3 := proc(t, et) evalf(et/t - 1) end proc;
    err2 := zip(f3, bbtl, esttimel);
    print("relative errors", err2);
    [describe[mean](err2), describe[standarddeviation](err2)]
end proc

> "blackbox step time";
                              "blackbox step time"

> foo([bbt = c*n^2 + e*n*nnz, {c, e}]);
                                        2                  -6
            "bbt = ", 0.00006672567571 n  - 0.2029315489 10   n nnz

"relative errors", [-0.0693341761, 0.029809375, -0.1317515328, 0.038624219,

    -0.1706171725, -0.2179117716, -0.1604869613, -0.0245361479, 0.121085272,

    -0.0180934476]

                         [-0.06032123438, 0.1030060548]

> "blackbox step time dominant term only";
                    "blackbox step time dominant term only"

> foo([bbt = e*n*nnz, {e}]);
                                                -7
                       "bbt = ", 0.5955896579 10   n nnz

"relative errors", [-0.5345415482, -0.5433376483, -0.4941340165, -0.4244691461,

    -0.4793993519, -0.4505054107, -0.3290283272, -0.1220473259, 0.017273229,

    0.045737533]

                         [-0.3314452012, 0.2156520518]

> "blackbox step time quadratic term only";
                    "blackbox step time quadratic term only"

> foo([bbt = e*n^2, {e}]);
                                                     2
                         "bbt = ", 0.00001516421690 n

"relative errors", [-0.4280737160, -0.4123532818, -0.4109698105, -0.3183058458,

    -0.4083929166, -0.3967675688, -0.2896530116, -0.0984837118, 0.042491433,

    0.032902320]

                         [-0.2687606111, 0.1794072861]

> 
> newfoo := proc(arg, tl)
> x := fit[leastsquare[op(arg)]]
>         ([tl, dimsl]):
> print("the fit = ", x);
> form := evalf(op(2,x)); 
> 
> f1 := proc(t, nn) evalf( subs(n = nn, form) / t - 1) end:
> err2 := zip(f1, tl, dimsl);
> print("relative errors", err2);
> 
> [describe[mean](err2),describe[standarddeviation](err2)];
> end:
Warning, `x` is implicitly declared local to procedure `newfoo`
Warning, `form` is implicitly declared local to procedure `newfoo`
Warning, `f1` is implicitly declared local to procedure `newfoo`
Warning, `err2` is implicitly declared local to procedure `newfoo`
> 
> "blackbox step times in n and lg(n) only";
                   "blackbox step times in n and lg(n) only"

> newfoo ([[bbt, n],bbt = a*n^2 + b*n^2*log(n), {a, b}], bbtl);
bytes used=8006104, alloc=4652204, time=0.42
                                            2                  -5  2
      "the fit = ", bbt = 0.00006254807945 n  - 0.5732053522 10   n  ln(n)

"relative errors", [0.242471706, 0.236124275, 0.070333725, 0.123715486,

    -0.106329402, -0.163674210, -0.124041334, 0.013663570, 0.100330115,

    -0.022112359]

                         [0.03704815720, 0.1361238845]

> 
> "BLACKBOX STEP TIMES in n2lg(n) only";
                     "BLACKBOX STEP TIMES in n2lg(n) only"

> newfoo ([[bbt, n],bbt = b*n^2*log(n), {b}], bbtl);
                                                    -5  2
                 "the fit = ", bbt = 0.1828748357 10   n  ln(n)

"relative errors", [-0.6437733996, -0.6210610964, -0.5663468809, -0.4614370711,

    -0.5065934112, -0.4729998667, -0.3446874433, -0.1370524076, 0.020813111,

    0.047258285]

                         [-0.3685880181, 0.2441081420]

> 
#dbt
> 
> "BLAS STEP TIMES";
                               "BLAS STEP TIMES"

> newfoo ([[dbt, n],dbt = a*n^3 + b*n^3*log(n), {a, b}], dbtl);
bytes used=12007704, alloc=4783252, time=0.65
                                        -8  3                  -9  3
     "the fit = ", dbt = 0.1776672526 10   n  + 0.1601621773 10   n  ln(n)

"relative errors", [-0.6885011750, -0.6481251765, -0.5076230448, -0.3588527709,

    -0.3328616640, -0.2690323042, -0.1989182023, 0.0076607751, 0.0453921622,

    -0.0051077884]

                         [-0.2955969189, 0.2513304875]

> 
> "blas step times, dominant term";
                        "blas step times, dominant term"

> newfoo ([[dbt, n],dbt = b*n^3*log(n), {b}], dbtl);
bytes used=16009136, alloc=4848776, time=0.88
                                                    -9  3
                 "the fit = ", dbt = 0.3732102412 10   n  ln(n)

"relative errors", [-0.7694091799, -0.7333159019, -0.5927223588, -0.4452896659,

    -0.4030126141, -0.3270990474, -0.2381255741, -0.0206489083, 0.029497302,

    -0.0004878492]

                         [-0.3500613797, 0.2795226525]

> 
> "blas step times, dominant term, fast arith";
                  "blas step times, dominant term, fast arith"

> newfoo ([[dbt, n],dbt = b*n^log[2](7)*log(n), {b}], dbtl);
                                                     /ln(7)\
                                                     |-----|
                                                 -8  \ln(2)/
              "the fit = ", dbt = 0.1859800706 10   n        ln(n)

"relative errors", [-0.5751411886, -0.5255987130, -0.3738941460, -0.2174988604,

    -0.2149883142, -0.1694267923, -0.1302647823, 0.057726146, 0.073510171,

    -0.0139471430]

                         [-0.2089523622, 0.2140929672]

> 
> "blas step times, fast arith, no log";
                     "blas step times, fast arith, no log"

> newfoo ([[dbt, n],dbt = b*n^log[2](7), {b}], dbtl);
                                                        /ln(7)\
                                                        |-----|
                                                    -7  \ln(2)/
                 "the fit = ", dbt = 0.1548089899 10   n

"relative errors", [-0.3152657221, -0.2614894405, -0.1462974590, -0.0057357547,

    -0.0551382405, -0.0456325796, -0.0536041224, 0.109241542, 0.100515463,

    -0.0237312821]

                         [-0.06971375959, 0.1308438657]

> 
> "lu step times";
                                "lu step times"

> newfoo ([[dlut, n],dlut = a*n^2 + b*n^3, {a, b}], dlutl);
                                            -6  2                  -9  3
        "the fit = ", dlut = 0.5485659519 10   n  + 0.2506892147 10   n

"relative errors", [-0.3633905337, -0.3501619779, -0.3536052641, -0.3523480887,

    -0.3468655179, -0.3416674243, -0.3099460474, 0.057478881, 0.129733022,

    -0.0186565964]

                         [-0.2249429547, 0.1874726743]

> 
> "lu step times, dominant term";
                         "lu step times, dominant term"

> newfoo ([[dlut, n],dlut =  b*n^3, {b}], dlutl);
                                                       -9  3
                   "the fit = ", dlut = 0.3838888362 10   n

"relative errors", [-0.9278103778, -0.9128628796, -0.8317859884, -0.7596314881,

    -0.6845759555, -0.6066648120, -0.4825195028, -0.0910227880, 0.047684180,

    0.009620610]

                         [-0.5239569001, 0.3602656406]

> 
#foo( [(1 = (c*n^2 + d*n^3 + e*n^3*ln(n))/dbt), {c, d, e}]);
#foo( [(1 = ( a + b*n + c*n^2 + d*n^3 + (e + f*n + g*n^2 + h*n^3)*evalf(ln(n)))/dbt), {a, b, c, d, e, f, g, h}]);
#foo( [(1 = ( a + b*n + c*n^2 + d*n^3 + e*ln(n) + f*n*ln(n) + g*n^2*ln(n) + h*n^3*ln(n))/dbt), {a, b, c, d, e, f, g, h}]);
> 
#foo( [(1 = c*n^2/dbt), { c}]);
#dlut
#x := fit[leastsquare[[dlut, n], dlut = c*n^2 + d*n^3 + e*n^3*ln(n), {c, d, e}]]
#       ([dlutl, dimsl]):
#form := evalf(op(2,x)); 
#
#err2 := zip(f1, dlutl, dimsl);
#
#[describe[mean](err2),describe[standarddeviation](err2)];
#
#
> quit
bytes used=18034484, alloc=4848776, time=0.99
