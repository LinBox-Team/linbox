In this file are instructions for developers and those wishing to
contribute to Linbox. It is intended both for the uninitiated developer
and for the reference of experienced developers.


I. Compilation and installation

If you are installing from a tarred distribution, please see the file
INSTALL for basic instructions on how to install Linbox. If you are
a developer installing from CVS, please see the instructions in 
section (III) below.


II. Basic layout

Linbox is a template library, so installation requires very little
actual compilation. Nearly all of the library is in header
files. Directories in the source distribution are as follows, relative
to the tree's root:

doc/      - Documentation (see below)
examples/ - Simple examples to help new users get started with the
		library (FIXME: examples doesn't exist yet).
tests/    - Tests for library performance and correctness
		(FIXME: tests must be made compilable and more tests needed).
macros/   - Files to assist the build system
src/      - All library source (mainly template header files) goes here
            	This is a layout proposed by some of us, with the thought that 
	    	it would improve the learning curve for new developers and 
	    	help organize documentation.  However we won't reorganize 
	    	the directory tree without the express OK of the developers 
	    	of existing code.
	algorithms/ - Specific algorithms, such as Wiedemann and Lanczos
	blackbox/   - Black box (i.e. matrix) objects
	element/    - Objects representing field elements
	field/      - Objects representing fields (e.g. rationals,
			integers modulo p, etc.)
	iterator/   - Iterators allowing one to browse the entries in a
			vector
	random/     - Random number generators
	vector/     - Vector implementations
		sparse/ - Sparse vectors
		dense/  - Dense vectors
	util/	    - Utility routines that don't belong anywhere else
util/     - Scripts and other miscellaneous items, mostly for making
		library maintenance easier 

N.B. Though the doc/ directory contains some top-level and tutorial
documentation, reference documentation is stored in parallel with the
source code, under the src/ tree.

TODO: remove config/, if it is just a remnant of the previous make system.


III. Configuration and installation from the CVS repository

Linbox is stored in a CVS repository at the University of Delaware. To
access the latest bleeding edge copy of Linbox from this source, you
will need a working copy of CVS and all of the GNU development tools
(e.g. autoconf, automake, GNU make, and so on). To access CVS:

1. Set your CVSROOT environment variable (on Bourne shell):

export CVSROOT=:pserver:<username>@linbox.pc.cis.udel.edu:/home/cvs

(and on the C shell):

setenv CVSROOT :pserver:<username>@linbox.pc.cis.udel.edu:/home/cvs

2. Log in to CVS; you only ever need to do this once for any given
Unix shell account:

cvs login

3. Check out the linbox module

cvs -z3 co linbox

The -z3 option compresses the data in transit, making the operation
faster for remote users.

4. Switch to the newly-created linbox directory and run the script
autogen.sh, optionally specifying the installation prefix:

cd linbox
./autogen.sh [--prefix=<prefix>]

This sets up the library in distributable form, creating the Makefile.in's
and the configure script.  Then it runs ./configure.  

For instance, to setup so that installation will put the include/ and lib/ 
directories within the linbox/ directory:
./autogen.sh --prefix=`pwd`

To allow linbox to use other existing packages such as gmp, ntl, givaro, 
saclib, etc, also add the appropriate --with-<package>-prefixes as in 
this example:
./autogen.sh --prefix=`pwd` --with-gmp-prefix=/usr/local/algebra/gmp \
--with-gcc-prefix=/usr/local/gnu/gcc --with-ntl-prefix=/usr/local/algebra/NTL 

Note that gmp requires the gcc dynamic library libstdc++.  To get a proper
setup for this you include the --with-gcc-prefix=... parameter.

5. Install the library:

make install

In particular this will create the include/LinBox directory and put
copies of all the code there.  Programs which use a linbox object
do "#include <LinBox/object.h>". For developers who
find it hard to navigate thru the src tree, you can try this:
Go to the src directory and enter "make flat".  This will create
src/flat/, a directory which contains {\em links} to all the linbox code.
Thus files can be conveniently searched, viewed, and even modified in 
src/flat/ (remember to cvs commit any changes vis a vis the original tree).

IV.  Maintaining the library during development (add, remove, update, commit)

1. Add a file:
To add a new file to the system, do two things.
(a) List the file in the appropriate place in the directory's 
    Makefile.am.  For instance if it is a header, add it to the 
    include_HEADERS list.
(b) Issue the CVS command 
cvs -z3 add <new-file>
This does not yet make the file available to others.  Remember to 
commit your work frequently, see below.

2. Add a directory:
To add a new directory to the system, do four things.
(a) List the directory in the SUBDIRS list of the Makefile.am of 
    the parent directory.
(b) cvs -z3 add <new-dir>
(c) create a Makefile.am in the directory and CVS add this file and your 
    other contents.
(c) Include an entry for the new directory's Makefile in the AC_OUTPUT
    call in linbox/configure.in.  This will enable construction of the 
    new directory's Makefile in the build process.
Remember to commit your changes.

3. Remove a file:

(a) rm <file>       # this must be done first
(b) delete <file> name from list(s) in Makefile.am
(c) cvs -z3 remove <file>
(d) cvs -z3 commit  # see commit section below.

4. Update your copy of the library:

When you want to update your tree with the contents of the main CVS
repository, issue the following command from the linbox/ directory:

cvs -z3 up -dP

The -z3 option is as before and the -dP option tells CVS to update the
directory structure as well as the files. Note that the order of items
in that command *is* important.

You should receive some information on what files have been
updated. If any files have a "C" before them, this means what you have
conflicts with what is in the repository. In other words, you made
changes while someone else made other changes and CVS does not know
how to reconcile the two. You will need to edit that file manually,
looking for and fixing lines like

<<<<<<<<<<<

===========

>>>>>>>>>>>

that show the sections that could not be reconciled.

5. Commit your changes to the CVS repository:

If you have made changes and would like to commit them to the global
repository, issue the command

cvs -z3 ci [<filename(s)>]

The optional filename(s) argument specifies what you would like to
commit; the default is to commit everything that has changed in the
current directory and its descendents. When you enter this command, a
text editor will come up prompting you for a log message. *ALWAYS
ENTER A LOG MESSAGE DESCRIBING WHAT YOU HAVE CHANGED*. Failure to do
so may result in your changes being backed out by the
administrator. When you are done entering your message, simply save
and exit the text editor.

For more info on CVS: 
http://www.cvshome.org/docs/manual/cvs.html

5. Patches:

If you are not a main Linbox developer but would like to submit some
addition or modification, your code is welcome. Please email a patch
(use 'cvs -z3 diff -u' to form a patch) to us and we will consider
including it.

===================
The Linbox Team
